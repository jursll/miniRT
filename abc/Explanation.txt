WHAT IS RAYTRACING ?
Ray tracing is a technique to generate realistic images by simulating
how light travels in the real world - but in reverse. Instead of tracing
light from sources to the camera (which would be inefficient), we trace
rays from the camera through each pixel into the scene.



CORE COMPONENTS
1. Mathematical Foundation (math*.c, vector*.c)
	- Vectors: 3D points and directions (x, y, z)
	- Operations: Add, subtract, dot product, cross product
	- Why needed: Everything in 3D graphics is vectors!

2. Scene Description (miniRT.h structures)
	- Camera: Where we view from
	- Objects: Things to render (spheres, planes, cylinders)
	- Lights: Illuminate the scene
	- Scene: Container for all elements

3. Ray-Object Intersection (sphere.c, plane.c)
	- Calculate where rays hit objects
	- Uses geometric equations
	- Returns distance to intersection

4. Rendering Pipeline (ray_casting.c)
	- For each pixel: create ray
	- Find what ray hits
	- Calculate color
	- Draw pixel

5. Display System (mlbx.c)
	- Creates window
	- Manages pixel buffer
	- Handles user input



CONCEPTS
1. The Ray
A ray is like a laser beam with:
	- Origin: Starting point (camera)
	- Direction: Where it's pointing (normalized vector)

Ray Equation: Point = Origin + t × Direction
	- t is the distance along the ray
	- When t = 0: we're at origin
	- When t = 5: we're 5 units along the ray

2. Vectors
Everything in 3D is represented as vectors:
	- Position: Where something is (x, y, z)
	- Direction: Where something points
	- Normal: Perpendicular to a surface

Key Operations:
	- Addition/Subtraction: used for moving points, finding directions between points
	- Dot Product: used for lighting calculations, checking angles
					Result: a single number (scalar). Meaning:
						- If A·B > 0: Vectors point in similar directions
						- If A·B = 0: Vectors are perpendicular
						- If A·B < 0: Vectors point in opposite directions
						- Used for: Lighting calculations, checking angles
	- Cross Product: Used for finding surface normals, camera calculations
					Result: A vector perpendicular to both A and B
	- Normalization: Make vector length = 1. Directions should always be normalized

3. Camera and Projection
Field of View (FOV)
	- How "wide" the camera sees
	- 70° is typical (human eye ≈ 90°)
	- Larger FOV = wider view but more distortion

Pixel to Ray Conversion
	For each pixel (x,y) on screen:
		- Convert to normalized coordinates (-1 to 1)
		- Apply FOV and aspect ratio
		- Create ray from camera through that point

4. Object Intersections
Sphere Intersection
Sphere equation: All points P where |P - Center|² = Radius²
Substituting ray equation gives quadratic: at² + bt + c = 0
	- Two solutions: Ray enters and exits sphere
	- One solution: Ray grazes sphere
	- No solution: Ray misses

Plane Intersection
Plane equation: All points P where (P - Point) · Normal = 0
Solving gives: t = (Point - Origin) · Normal / (Direction · Normal)
	- If denominator ≈ 0: Ray parallel to plane
	- If t < 0: Intersection behind camera

5. The Rendering Algorithm
For each pixel (x, y):
	a. Create ray from camera through pixel
	b. For each object in scene:
		- Calculate intersection distance
		- Keep track of closest
	c. If hit something:
		- Calculate lighting
		- Return color
	d. Else:
		- Return background color


